import { defineConfig, loadEnv } from 'vite'
import react from '@vitejs/plugin-react'
import { networkInterfaces } from 'os'

// Função para detectar IP local da máquina
function getLocalIP(): string {
  const nets = networkInterfaces()
  for (const name of Object.keys(nets)) {
    for (const net of nets[name] || []) {
      // Pular addresses não IPv4 e internos (i.e. 127.0.0.1)
      if (net.family === 'IPv4' && !net.internal) {
        return net.address
      }
    }
  }
  return 'localhost'
}

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  // Carregar variáveis de ambiente
  const env = loadEnv(mode, process.cwd(), '')
  
  // Detectar ambiente automaticamente
  const isDevelopment = mode === 'development'
  const localIP = getLocalIP()
  
  // URLs da API por ambiente
  let targetUrl: string
  
  if (isDevelopment) {
    // Desenvolvimento: usar localhost primeiro, depois IP local se especificado
    targetUrl = env.VITE_API_LOCAL_URL || `http://localhost:5000`
  } else {
    // Produção: usar IP público da OCI
    targetUrl = env.VITE_API_PRODUCTION_URL || 'http://129.153.86.168:5000'
  }
  
  console.log(`\n🔧 Configuração Vite [${mode}]:`, {
    isDevelopment,
    localIP,
    targetUrl,
    proxyEnabled: true
  })
  
  return {
    plugins: [react()],
    define: {
      // Disponibilizar informações de ambiente para o frontend
      __DEV__: isDevelopment,
      __LOCAL_IP__: JSON.stringify(localIP),
      __API_TARGET__: JSON.stringify(targetUrl)
    },
    server: {
      host: '0.0.0.0',
      port: 5005,
      strictPort: true,
      hmr: {
        port: 5005
      },
      cors: true,
      proxy: {
        '/api': {
          target: targetUrl,
          changeOrigin: true,
          secure: false,
          rewrite: (path) => path.replace(/^\/api/, ''),
          configure: (proxy, _options) => {
            proxy.on('error', (err, _req, _res) => {
              console.log('❌ Proxy error:', err.message)
            })
            proxy.on('proxyReq', (proxyReq, req, _res) => {
              console.log(`📤 [${mode}] ${req.method} ${req.url} -> ${targetUrl}`)
            })
            proxy.on('proxyRes', (proxyRes, req, _res) => {
              console.log(`📥 [${mode}] ${proxyRes.statusCode} ${req.url}`)
            })
          },
        }
      }
    },
    preview: {
      host: '0.0.0.0',
      port: 5005,
      strictPort: true,
      cors: true
    },
    optimizeDeps: {
      include: [
        'react', 
        'react-dom', 
        'react-router-dom', 
        '@mui/material', 
        '@mui/icons-material',
        '@mui/material/styles',
        '@mui/material/Button',
        '@mui/material/TextField',
        '@mui/material/Dialog',
        '@mui/material/DialogTitle',
        '@mui/material/DialogContent',
        '@mui/material/DialogActions',
        '@mui/material/Table',
        '@mui/material/TableBody',
        '@mui/material/TableCell',
        '@mui/material/TableContainer',
        '@mui/material/TableHead',
        '@mui/material/TableRow',
        '@mui/material/Paper',
        '@mui/material/Typography',
        '@mui/material/Box',
        '@mui/material/Container',
        '@mui/material/Grid',
        '@mui/material/Card',
        '@mui/material/CardContent'
      ],
      entries: ['src/main.tsx']
    },
    build: {
      target: 'esnext',
      minify: 'esbuild',
      rollupOptions: {
        output: {
          manualChunks: {
            vendor: ['react', 'react-dom'],
            mui: ['@mui/material', '@mui/icons-material'],
            router: ['react-router-dom']
          }
        }
      },
      sourcemap: false,
      chunkSizeWarningLimit: 1000,
      assetsInlineLimit: 4096
    }
  }
})