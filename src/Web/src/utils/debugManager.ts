/**
 * Utilit√°rio para gerenciar configura√ß√µes de debug e desenvolvimento
 */

interface DebugConfig {
  isEnabled: boolean;
  showConsole: boolean;
  showPerformance: boolean;
  environment: string;
  version: string;
}

class DebugManager {
  private static instance: DebugManager;
  private config: DebugConfig;

  private constructor() {
    this.config = {
      isEnabled: this.parseBoolean(import.meta.env.VITE_ENABLE_DEBUGGER),
      showConsole: this.parseBoolean(import.meta.env.VITE_ENABLE_CONSOLE_LOGS),
      showPerformance: this.parseBoolean(import.meta.env.VITE_ENABLE_PERFORMANCE_MONITOR),
      environment: import.meta.env.VITE_APP_ENVIRONMENT || 'development',
      version: import.meta.env.VITE_APP_VERSION || '1.0.0',
    };
  }

  static getInstance(): DebugManager {
    if (!DebugManager.instance) {
      DebugManager.instance = new DebugManager();
    }
    return DebugManager.instance;
  }

  private parseBoolean(value: string | undefined): boolean {
    return value === 'true';
  }

  get isDebugEnabled(): boolean {
    return import.meta.env.DEV && this.config.isEnabled;
  }

  get isConsoleEnabled(): boolean {
    return this.config.showConsole;
  }

  get isPerformanceEnabled(): boolean {
    return this.config.showPerformance;
  }

  get environment(): string {
    return this.config.environment;
  }

  get version(): string {
    return this.config.version;
  }

  get isProduction(): boolean {
    return this.config.environment === 'production';
  }

  get isDevelopment(): boolean {
    return this.config.environment === 'development';
  }

  /**
   * Log apenas se o console estiver habilitado
   */
  log(message: string, ...args: any[]): void {
    if (this.isConsoleEnabled && !this.isProduction) {
      console.log(`üêõ [HealthCore Debug] ${message}`, ...args);
    }
  }

  /**
   * Log de erro sempre habilitado
   */
  error(message: string, ...args: any[]): void {
    console.error(`‚ùå [HealthCore Error] ${message}`, ...args);
  }

  /**
   * Log de aviso sempre habilitado
   */
  warn(message: string, ...args: any[]): void {
    console.warn(`‚ö†Ô∏è [HealthCore Warning] ${message}`, ...args);
  }

  /**
   * Log de informa√ß√£o apenas em desenvolvimento
   */
  info(message: string, ...args: any[]): void {
    if (!this.isProduction) {
      console.info(`‚ÑπÔ∏è [HealthCore Info] ${message}`, ...args);
    }
  }

  /**
   * Obt√©m todas as configura√ß√µes de debug
   */
  getConfig(): DebugConfig & { isDev: boolean; isProd: boolean } {
    return {
      ...this.config,
      isDev: this.isDevelopment,
      isProd: this.isProduction,
    };
  }

  /**
   * Exibe informa√ß√µes do sistema no console
   */
  logSystemInfo(): void {
    if (!this.isDebugEnabled) return;

    console.group('üè• HealthCore - System Information');
    console.log('üì± Environment:', this.environment);
    console.log('üîß Version:', this.version);
    console.log('üêõ Debug Enabled:', this.isDebugEnabled);
    console.log('üìù Console Logs:', this.isConsoleEnabled);
    console.log('‚ö° Performance Monitor:', this.isPerformanceEnabled);
    console.log('üåç User Agent:', navigator.userAgent);
    console.log('üñ•Ô∏è Platform:', navigator.platform);
    console.log('üó£Ô∏è Language:', navigator.language);
    console.log('üìä Screen:', `${screen.width}x${screen.height}`);
    console.log('üîç Viewport:', `${window.innerWidth}x${window.innerHeight}`);
    console.groupEnd();
  }
}

// Inst√¢ncia singleton
export const debugManager = DebugManager.getInstance();

// Hook para usar as configura√ß√µes de debug
export const useDebugConfig = () => {
  return debugManager.getConfig();
};

// Fun√ß√µes de conveni√™ncia
export const isDebugEnabled = () => debugManager.isDebugEnabled;
export const logDebug = (message: string, ...args: any[]) => debugManager.log(message, ...args);
export const logError = (message: string, ...args: any[]) => debugManager.error(message, ...args);
export const logWarn = (message: string, ...args: any[]) => debugManager.warn(message, ...args);
export const logInfo = (message: string, ...args: any[]) => debugManager.info(message, ...args);

// Inicializa as informa√ß√µes do sistema no carregamento (apenas em desenvolvimento)
if (debugManager.isDebugEnabled) {
  debugManager.logSystemInfo();
}