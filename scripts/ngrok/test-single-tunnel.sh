#!/bin/bash

# üß™ Test Single Tunnel - HealthCore
# Testa a configura√ß√£o de t√∫nel √∫nico do ngrok

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üß™ Testando configura√ß√£o ngrok${NC}"
echo "=============================="

# Fun√ß√£o para testar endpoint
test_endpoint() {
    local url=$1
    local description=$2
    local expected_status=${3:-200}
    
    echo -n "üîç Testando $description... "
    
    response=$(curl -s -w "%{http_code}" -o /tmp/test_response "$url" --max-time 10)
    
    if [ "$response" = "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå FALHOU (Status: $response)${NC}"
        return 1
    fi
}

# Verificar se os servi√ßos est√£o rodando localmente
echo "üìã Verificando servi√ßos locais..."
echo ""

API_OK=false
FRONTEND_OK=false

if test_endpoint "http://localhost:5000/health" "API local"; then
    API_OK=true
fi

if test_endpoint "http://localhost:5005" "Frontend local"; then
    FRONTEND_OK=true
fi

echo ""

# Verificar se ngrok est√° rodando
echo "üìã Verificando ngrok..."
echo ""

NGROK_RUNNING=false
NGROK_URL=""

if curl -s http://localhost:4040/api/tunnels > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ ngrok API acess√≠vel${NC}"
    
    # Obter URL do t√∫nel
    NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    for tunnel in data['tunnels']:
        if '5005' in str(tunnel['config']['addr']):
            print(tunnel['public_url'])
            break
except:
    pass
" 2>/dev/null)
    
    if [ ! -z "$NGROK_URL" ]; then
        echo -e "${GREEN}‚úÖ T√∫nel ngrok ativo: $NGROK_URL${NC}"
        NGROK_RUNNING=true
    else
        echo -e "${RED}‚ùå T√∫nel ngrok n√£o encontrado${NC}"
    fi
else
    echo -e "${RED}‚ùå ngrok n√£o est√° rodando${NC}"
fi

echo ""

# Testar acesso externo se ngrok estiver rodando
if [ "$NGROK_RUNNING" = true ]; then
    echo "üìã Testando acesso externo..."
    echo ""
    
    if test_endpoint "$NGROK_URL" "Frontend via ngrok"; then
        echo -e "${GREEN}‚úÖ Frontend acess√≠vel externamente${NC}"
        
        # Testar se o frontend consegue acessar a API
        echo "üîç Testando comunica√ß√£o frontend -> API..."
        
        # Fazer uma requisi√ß√£o atrav√©s do frontend para testar a API
        api_test_url="$NGROK_URL"
        
        # Verificar se h√° JavaScript que faz chamadas para a API
        frontend_content=$(curl -s "$api_test_url" --max-time 10)
        
        if echo "$frontend_content" | grep -q "localhost:5000\|/api"; then
            echo -e "${GREEN}‚úÖ Frontend configurado para acessar API local${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  N√£o foi poss√≠vel verificar configura√ß√£o da API no frontend${NC}"
        fi
    fi
fi

echo ""
echo "üìã Resumo dos testes:"
echo "===================="

if [ "$API_OK" = true ]; then
    echo -e "${GREEN}‚úÖ API local funcionando${NC}"
else
    echo -e "${RED}‚ùå API local com problemas${NC}"
fi

if [ "$FRONTEND_OK" = true ]; then
    echo -e "${GREEN}‚úÖ Frontend local funcionando${NC}"
else
    echo -e "${RED}‚ùå Frontend local com problemas${NC}"
fi

if [ "$NGROK_RUNNING" = true ]; then
    echo -e "${GREEN}‚úÖ ngrok funcionando${NC}"
    echo -e "${BLUE}üåê URL externa: $NGROK_URL${NC}"
else
    echo -e "${RED}‚ùå ngrok com problemas${NC}"
fi

echo ""

# Verificar arquivos de configura√ß√£o
echo "üìã Verificando configura√ß√£o..."
echo ""

if [ -f "src/Web/.env.local" ]; then
    echo -e "${GREEN}‚úÖ Arquivo .env.local existe${NC}"
    
    if grep -q "localhost:5000" src/Web/.env.local; then
        echo -e "${GREEN}‚úÖ API configurada para localhost${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Configura√ß√£o da API pode estar incorreta${NC}"
    fi
else
    echo -e "${RED}‚ùå Arquivo .env.local n√£o encontrado${NC}"
    echo "üí° Execute: bash scripts/ngrok/configure-frontend-env.sh"
fi

if [ -f "src/Web/vite.config.ts" ]; then
    echo -e "${GREEN}‚úÖ Arquivo vite.config.ts existe${NC}"
    
    if grep -q "proxy" src/Web/vite.config.ts; then
        echo -e "${GREEN}‚úÖ Proxy configurado no Vite${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Proxy n√£o configurado no Vite${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo vite.config.ts n√£o encontrado${NC}"
fi

echo ""

# Recomenda√ß√µes finais
if [ "$API_OK" = true ] && [ "$FRONTEND_OK" = true ] && [ "$NGROK_RUNNING" = true ]; then
    echo -e "${GREEN}üéâ Configura√ß√£o est√° funcionando perfeitamente!${NC}"
    echo "============================================="
    echo -e "${BLUE}üì± Acesse: $NGROK_URL${NC}"
    echo ""
    echo -e "${YELLOW}üí° Dicas:${NC}"
    echo "   ‚Ä¢ O frontend est√° acess√≠vel externamente"
    echo "   ‚Ä¢ A API √© acessada localmente pelo frontend"
    echo "   ‚Ä¢ Todas as funcionalidades devem funcionar"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Alguns problemas foram encontrados${NC}"
    echo "====================================="
    echo ""
    echo -e "${BLUE}üîß Solu√ß√µes sugeridas:${NC}"
    
    if [ "$API_OK" = false ]; then
        echo "   ‚Ä¢ Inicie a API: cd src/Api && dotnet run --urls=\"http://0.0.0.0:5000\""
    fi
    
    if [ "$FRONTEND_OK" = false ]; then
        echo "   ‚Ä¢ Inicie o frontend: cd src/Web && npm run dev -- --host 0.0.0.0 --port 5005"
    fi
    
    if [ "$NGROK_RUNNING" = false ]; then
        echo "   ‚Ä¢ Configure o ambiente: bash scripts/ngrok/configure-frontend-env.sh"
        echo "   ‚Ä¢ Inicie o ngrok: bash scripts/ngrok/setup-single-tunnel.sh"
    fi
fi

echo ""
echo -e "${BLUE}üìÑ Logs dispon√≠veis:${NC}"
echo "   ‚Ä¢ API: /tmp/healthcore-api.log"
echo "   ‚Ä¢ Frontend: /tmp/healthcore-frontend.log"
echo "   ‚Ä¢ ngrok: scripts/ngrok/ngrok-frontend.log"
echo "   ‚Ä¢ Sess√£o atual: scripts/ngrok/current-session.txt"
echo ""