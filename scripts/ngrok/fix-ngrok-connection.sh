#!/bin/bash

# Script para diagnosticar e corrigir problemas ERR_NGROK_8012
# Resolve problemas de conex√£o do ngrok com servi√ßos locais

set -e

echo "üîß Diagn√≥stico e Corre√ß√£o de Problemas Ngrok (ERR_NGROK_8012)"
echo "================================================================"

# Fun√ß√£o para verificar porta
check_port() {
    local port=$1
    local service=$2
    
    if netstat -tuln | grep -q ":$port "; then
        echo "‚úÖ Porta $port ($service) est√° em uso"
        return 0
    else
        echo "‚ùå Porta $port ($service) n√£o est√° em uso"
        return 1
    fi
}

# Fun√ß√£o para verificar conectividade HTTP
check_http() {
    local url=$1
    local service=$2
    
    if curl -s --connect-timeout 5 "$url" > /dev/null 2>&1; then
        echo "‚úÖ $service respondendo em $url"
        return 0
    else
        echo "‚ùå $service n√£o responde em $url"
        return 1
    fi
}

# Verificar se ngrok est√° instalado
echo "üîç Verificando instala√ß√£o do ngrok..."
if command -v ngrok &> /dev/null; then
    NGROK_VERSION=$(ngrok version | head -n1)
    echo "‚úÖ Ngrok instalado: $NGROK_VERSION"
else
    echo "‚ùå Ngrok n√£o est√° instalado!"
    echo "üì• Para instalar:"
    echo "   curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null"
    echo "   echo 'deb https://ngrok-agent.s3.amazonaws.com buster main' | sudo tee /etc/apt/sources.list.d/ngrok.list"
    echo "   sudo apt update && sudo apt install ngrok"
    exit 1
fi

echo ""
echo "üîç Verificando servi√ßos locais..."

# Verificar portas
API_PORT_OK=false
FRONTEND_PORT_OK=false

if check_port 5000 "API"; then
    API_PORT_OK=true
fi

if check_port 5005 "Frontend"; then
    FRONTEND_PORT_OK=true
fi

echo ""
echo "üåê Verificando conectividade HTTP..."

# Verificar conectividade HTTP
API_HTTP_OK=false
FRONTEND_HTTP_OK=false

if check_http "http://localhost:5000/health/ready" "API Health Check"; then
    API_HTTP_OK=true
elif check_http "http://localhost:5000" "API"; then
    API_HTTP_OK=true
fi

if check_http "http://localhost:5005" "Frontend"; then
    FRONTEND_HTTP_OK=true
fi

echo ""
echo "üîç Verificando interfaces de rede..."

# Listar interfaces dispon√≠veis
echo "üì° Interfaces de rede dispon√≠veis:"
ip addr show | grep -E '^[0-9]+:' | awk '{print $2}' | sed 's/:$//' | while read iface; do
    ip addr show "$iface" | grep 'inet ' | awk '{print "   " $2 " (" iface ")"}'
done

echo ""
echo "üîç Testando conectividade em diferentes IPs..."

# Testar conectividade em diferentes IPs
TEST_IPS=("127.0.0.1" "localhost" "0.0.0.0")
for ip in "${TEST_IPS[@]}"; do
    echo "üß™ Testando $ip:5005..."
    if curl -s --connect-timeout 3 "http://$ip:5005" > /dev/null 2>&1; then
        echo "   ‚úÖ $ip:5005 acess√≠vel"
    else
        echo "   ‚ùå $ip:5005 n√£o acess√≠vel"
    fi
done

echo ""
echo "üìã Resumo do Diagn√≥stico:"
echo "========================"

if [ "$API_PORT_OK" = true ] && [ "$API_HTTP_OK" = true ]; then
    echo "‚úÖ API: Funcionando corretamente (porta 5000)"
else
    echo "‚ùå API: Problemas detectados"
    echo "   üîß Solu√ß√£o: cd ../Api && dotnet run"
fi

if [ "$FRONTEND_PORT_OK" = true ] && [ "$FRONTEND_HTTP_OK" = true ]; then
    echo "‚úÖ Frontend: Funcionando corretamente (porta 5005)"
else
    echo "‚ùå Frontend: Problemas detectados"
    echo "   üîß Solu√ß√£o: npm run dev"
fi

echo ""
echo "üöÄ Comandos para corrigir problemas:"
echo "===================================="

if [ "$API_HTTP_OK" = false ]; then
    echo "üì° Para iniciar a API:"
    echo "   cd ../Api && dotnet run"
    echo ""
fi

if [ "$FRONTEND_HTTP_OK" = false ]; then
    echo "üåê Para iniciar o Frontend:"
    echo "   npm run dev"
    echo ""
fi

echo "üîó Para iniciar o ngrok (ap√≥s corrigir os servi√ßos):"
echo "   ngrok http 5005"
echo "   # ou use: ./scripts/setup-ngrok.sh"
echo ""
echo "üì± Painel do ngrok: http://localhost:4040"
echo ""
echo "üí° Dicas importantes:"
echo "   ‚Ä¢ Certifique-se de que o Vite est√° configurado com host: '0.0.0.0'"
echo "   ‚Ä¢ Verifique se n√£o h√° firewall bloqueando as portas"
echo "   ‚Ä¢ O ngrok deve apontar para localhost:5005, n√£o para IPs espec√≠ficos"
echo "   ‚Ä¢ Use 'ngrok http 5005' em vez de 'ngrok http 172.17.158.1:5005'"

echo ""
echo "üîß Executar corre√ß√£o autom√°tica? (s/n)"
read -r response

if [[ "$response" =~ ^[Ss]$ ]]; then
    echo "üöÄ Iniciando corre√ß√£o autom√°tica..."
    
    if [ "$API_HTTP_OK" = false ]; then
        echo "üì° Iniciando API..."
        cd ../Api
        nohup dotnet run > /tmp/healthcore-api.log 2>&1 &
        echo "API iniciada em background (log: /tmp/healthcore-api.log)"
        cd ../Web
        sleep 3
    fi
    
    if [ "$FRONTEND_HTTP_OK" = false ]; then
        echo "üåê Iniciando Frontend..."
        nohup npm run dev > /tmp/healthcore-frontend.log 2>&1 &
        echo "Frontend iniciado em background (log: /tmp/healthcore-frontend.log)"
        sleep 3
    fi
    
    echo "‚è≥ Aguardando servi√ßos inicializarem..."
    sleep 5
    
    echo "üîó Iniciando ngrok..."
    echo "üì± Acesse o painel em: http://localhost:4040"
    ngrok http 5005
else
    echo "‚ÑπÔ∏è  Execute as corre√ß√µes manualmente conforme indicado acima."
fi