#!/bin/bash

# üîß Configure Frontend Environment - HealthCore
# Configura o ambiente do frontend para trabalhar com ngrok

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Configurando ambiente do frontend${NC}"
echo "===================================="

# Diret√≥rio do frontend
FRONTEND_DIR="src/Web"

if [ ! -d "$FRONTEND_DIR" ]; then
    echo -e "${RED}‚ùå Diret√≥rio do frontend n√£o encontrado: $FRONTEND_DIR${NC}"
    exit 1
fi

cd "$FRONTEND_DIR"

# Backup do arquivo .env atual se existir
if [ -f ".env.local" ]; then
    echo "üìÑ Fazendo backup do .env.local atual..."
    cp .env.local .env.local.backup.$(date +%Y%m%d_%H%M%S)
fi

# Criar configura√ß√£o otimizada para ngrok
echo "üìù Criando configura√ß√£o .env.local..."
cat > .env.local << 'EOF'
# üåê Configura√ß√£o HealthCore - Ngrok Single Tunnel
# Gerado automaticamente em $(date)

# ====================================================================
# CONFIGURA√á√ÉO DA API
# ====================================================================
# A API roda localmente e √© acessada pelo frontend via localhost
# Isso funciona porque o frontend e API est√£o no mesmo servidor
VITE_API_BASE_URL=http://localhost:5000
VITE_API_URL=http://localhost:5000
VITE_API_TIMEOUT=30000

# ====================================================================
# CONFIGURA√á√ÉO DA APLICA√á√ÉO
# ====================================================================
VITE_APP_NAME=HealthCore Frontend
VITE_APP_VERSION=1.0.0
VITE_APP_TITLE=HealthCore

# ====================================================================
# CONFIGURA√á√ÉO DE DESENVOLVIMENTO
# ====================================================================
VITE_DEV_MODE=true
VITE_NODE_ENV=development

# ====================================================================
# CONFIGURA√á√ÉO DE REDE
# ====================================================================
# Permite acesso de qualquer IP (necess√°rio para ngrok)
VITE_HOST=0.0.0.0
VITE_PORT=5005

# ====================================================================
# CONFIGURA√á√ÉO DE CORS
# ====================================================================
# Headers necess√°rios para funcionamento com ngrok
VITE_CORS_ORIGIN=*

# ====================================================================
# OBSERVA√á√ïES
# ====================================================================
# Esta configura√ß√£o permite:
# 1. Frontend acess√≠vel externamente via ngrok
# 2. API acess√≠vel localmente pelo frontend
# 3. Comunica√ß√£o interna mantida
# 4. Funcionalidade completa com apenas 1 t√∫nel ngrok
EOF

echo -e "${GREEN}‚úÖ Arquivo .env.local criado com sucesso${NC}"

# Verificar se o vite.config.ts precisa ser atualizado
echo "üîç Verificando configura√ß√£o do Vite..."

if [ -f "vite.config.ts" ]; then
    # Verificar se j√° tem a configura√ß√£o de proxy
    if ! grep -q "proxy" vite.config.ts; then
        echo "üìù Atualizando vite.config.ts para suportar proxy..."
        
        # Fazer backup
        cp vite.config.ts vite.config.ts.backup.$(date +%Y%m%d_%H%M%S)
        
        # Criar nova configura√ß√£o
        cat > vite.config.ts << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    host: '0.0.0.0',
    port: 5005,
    // Permite qualquer host do ngrok dinamicamente
    allowedHosts: [
      "localhost",
      "127.0.0.1",
      ".ngrok-free.app",
      ".ngrok.io",
      ".ngrok.app"
    ],
    proxy: {
      // Proxy para API local quando acessado via ngrok
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  },
  preview: {
    host: '0.0.0.0',
    port: 5005
  }
})
EOF
        echo -e "${GREEN}‚úÖ vite.config.ts atualizado${NC}"
    else
        echo -e "${YELLOW}‚ÑπÔ∏è  vite.config.ts j√° possui configura√ß√£o de proxy${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  vite.config.ts n√£o encontrado${NC}"
fi

# Verificar package.json para scripts √∫teis
echo "üîç Verificando scripts do package.json..."

if [ -f "package.json" ]; then
    # Adicionar script para ngrok se n√£o existir
    if ! grep -q "ngrok" package.json; then
        echo "üìù Adicionando scripts √∫teis ao package.json..."
        
        # Fazer backup
        cp package.json package.json.backup.$(date +%Y%m%d_%H%M%S)
        
        # Usar node para adicionar scripts
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        
        if (!pkg.scripts) pkg.scripts = {};
        
        pkg.scripts['dev:ngrok'] = 'vite --host 0.0.0.0 --port 5005';
        pkg.scripts['start:ngrok'] = 'npm run dev:ngrok';
        pkg.scripts['setup:ngrok'] = 'bash ../../scripts/ngrok/setup-single-tunnel.sh';
        
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        console.log('Scripts adicionados com sucesso!');
        "
        
        echo -e "${GREEN}‚úÖ Scripts adicionados ao package.json${NC}"
    else
        echo -e "${YELLOW}‚ÑπÔ∏è  Scripts ngrok j√° existem no package.json${NC}"
    fi
fi

cd ../..

echo ""
echo -e "${GREEN}üéâ Configura√ß√£o conclu√≠da!${NC}"
echo "========================="
echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
echo "1. Execute: bash scripts/ngrok/setup-single-tunnel.sh"
echo "2. Acesse o frontend via URL do ngrok"
echo "3. Todas as funcionalidades estar√£o dispon√≠veis"
echo ""
echo -e "${YELLOW}üí° Arquivos modificados:${NC}"
echo "   ‚Ä¢ src/Web/.env.local (configura√ß√£o principal)"
echo "   ‚Ä¢ src/Web/vite.config.ts (proxy para API)"
echo "   ‚Ä¢ src/Web/package.json (scripts √∫teis)"
echo ""
echo -e "${BLUE}üîß Scripts dispon√≠veis:${NC}"
echo "   ‚Ä¢ npm run setup:ngrok (configura e inicia ngrok)"
echo "   ‚Ä¢ npm run dev:ngrok (inicia frontend para ngrok)"
echo ""