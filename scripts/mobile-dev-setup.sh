#!/bin/bash

# üì± Script de Configura√ß√£o Mobile - HealthCore
# Configura ambiente completo para desenvolvimento mobile via ngrok

set -e

# Cores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}üì± HealthCore - Configura√ß√£o Mobile Development${NC}"
echo "=================================================="
echo ""

# Verificar depend√™ncias
echo -e "${BLUE}üîç Verificando depend√™ncias...${NC}"

# Verificar ngrok
if ! command -v ngrok &> /dev/null; then
    echo -e "${RED}‚ùå ngrok n√£o encontrado${NC}"
    echo "üí° Para instalar:"
    echo "   - Linux: snap install ngrok"
    echo "   - macOS: brew install ngrok"
    echo "   - Windows: Download em https://ngrok.com/download"
    echo ""
    echo "üìã Ap√≥s instalar, configure seu token:"
    echo "   ngrok config add-authtoken YOUR_TOKEN"
    exit 1
fi

# Verificar Node.js
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js n√£o encontrado${NC}"
    exit 1
fi

# Verificar npm
if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm n√£o encontrado${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Depend√™ncias OK${NC}"
echo ""

# Ir para diret√≥rio do frontend
cd src/Web

# Verificar package.json
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå package.json n√£o encontrado${NC}"
    exit 1
fi

# Instalar depend√™ncias se necess√°rio
if [ ! -d "node_modules" ]; then
    echo -e "${BLUE}üì¶ Instalando depend√™ncias...${NC}"
    npm install
fi

# Configurar .env.local para desenvolvimento mobile
echo -e "${BLUE}‚öôÔ∏è Configurando ambiente mobile...${NC}"
cat > .env.local << EOF
# Configura√ß√£o Mobile Development - HealthCore
VITE_API_URL=http://129.153.86.168:5000
VITE_API_BASE_URL=http://129.153.86.168:5000
VITE_APP_TITLE=HealthCore Mobile
VITE_API_TIMEOUT=30000
VITE_MOBILE_DEV=true

# Configura√ß√µes de desenvolvimento
VITE_DEV_MODE=true
VITE_DEBUG_MODE=false

# Performance mobile
VITE_LAZY_LOADING=true
VITE_OPTIMIZE_IMAGES=true
EOF

echo -e "${GREEN}‚úÖ Ambiente configurado${NC}"

# Fun√ß√£o para iniciar frontend
start_frontend() {
    echo -e "${BLUE}üåê Iniciando frontend mobile...${NC}"
    npm run dev:network &
    FRONTEND_PID=$!
    
    # Aguardar frontend inicializar
    echo -e "${YELLOW}‚è≥ Aguardando frontend inicializar...${NC}"
    sleep 5
    
    # Verificar se frontend est√° rodando
    if curl -s http://localhost:5005 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Frontend rodando em http://localhost:5005${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Erro ao iniciar frontend${NC}"
        return 1
    fi
}

# Fun√ß√£o para configurar ngrok
setup_ngrok() {
    echo -e "${BLUE}üåê Configurando ngrok...${NC}"
    
    # Iniciar ngrok
    ngrok http 5005 --log=stdout > /tmp/ngrok-frontend.log 2>&1 &
    NGROK_PID=$!
    
    echo -e "${YELLOW}‚è≥ Aguardando ngrok inicializar...${NC}"
    sleep 5
    
    # Obter URL do ngrok via API
    NGROK_URL=""
    for i in {1..10}; do
        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o 'https://[^"]*\.ngrok[^"]*' | head -1)
        if [ ! -z "$NGROK_URL" ]; then
            break
        fi
        sleep 2
    done
    
    if [ ! -z "$NGROK_URL" ]; then
        echo -e "${GREEN}‚úÖ ngrok configurado: $NGROK_URL${NC}"
        
        # Salvar URL para uso posterior
        echo "$NGROK_URL" > /tmp/healthcore-ngrok-url.txt
        
        return 0
    else
        echo -e "${RED}‚ùå Erro ao configurar ngrok${NC}"
        return 1
    fi
}

# Fun√ß√£o de cleanup
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë Parando servi√ßos...${NC}"
    if [ ! -z "$FRONTEND_PID" ]; then
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    if [ ! -z "$NGROK_PID" ]; then
        kill $NGROK_PID 2>/dev/null || true
    fi
    exit 0
}

# Capturar sinais
trap cleanup SIGINT SIGTERM

# Menu principal
echo -e "${PURPLE}üìã Op√ß√µes de configura√ß√£o:${NC}"
echo "1. üöÄ Iniciar desenvolvimento mobile completo (frontend + ngrok)"
echo "2. üåê Apenas frontend local"
echo "3. üîß Apenas ngrok (frontend j√° rodando)"
echo "4. üì± Status dos servi√ßos"
echo "5. üßπ Limpar configura√ß√µes"
echo ""
read -p "Escolha uma op√ß√£o [1-5]: " choice

case $choice in
    1)
        echo -e "${BLUE}üöÄ Iniciando desenvolvimento mobile completo...${NC}"
        if start_frontend && setup_ngrok; then
            NGROK_URL=$(cat /tmp/healthcore-ngrok-url.txt)
            echo ""
            echo -e "${GREEN}üéâ Ambiente mobile configurado com sucesso!${NC}"
            echo ""
            echo -e "${PURPLE}üì± URLs para acesso mobile:${NC}"
            echo -e "   üåê App (ngrok): ${GREEN}$NGROK_URL${NC}"
            echo -e "   üè† Local: ${GREEN}http://localhost:5005${NC}"
            echo -e "   üìä ngrok Dashboard: ${GREEN}http://localhost:4040${NC}"
            echo ""
            echo -e "${YELLOW}üí° Use a URL ngrok no seu celular (qualquer rede WiFi)${NC}"
            echo -e "${YELLOW}üí° Pressione Ctrl+C para parar todos os servi√ßos${NC}"
            echo ""
            
            # QR Code se dispon√≠vel
            if command -v qrencode &> /dev/null; then
                echo -e "${BLUE}üì± QR Code para acesso r√°pido:${NC}"
                echo "$NGROK_URL" | qrencode -t ANSI
                echo ""
            fi
            
            # Aguardar indefinidamente
            wait
        else
            echo -e "${RED}‚ùå Erro na configura√ß√£o${NC}"
            cleanup
        fi
        ;;
    2)
        echo -e "${BLUE}üåê Iniciando apenas frontend...${NC}"
        start_frontend
        echo -e "${GREEN}‚úÖ Frontend dispon√≠vel em http://localhost:5005${NC}"
        wait
        ;;
    3)
        echo -e "${BLUE}üîß Configurando apenas ngrok...${NC}"
        if curl -s http://localhost:5005 > /dev/null 2>&1; then
            setup_ngrok
            NGROK_URL=$(cat /tmp/healthcore-ngrok-url.txt)
            echo -e "${GREEN}‚úÖ ngrok dispon√≠vel: $NGROK_URL${NC}"
            wait
        else
            echo -e "${RED}‚ùå Frontend n√£o est√° rodando na porta 5005${NC}"
        fi
        ;;
    4)
        echo -e "${BLUE}üì± Status dos servi√ßos:${NC}"
        echo ""
        
        # Frontend
        if curl -s http://localhost:5005 > /dev/null 2>&1; then
            echo -e "   Frontend: ${GREEN}‚úÖ Rodando (porta 5005)${NC}"
        else
            echo -e "   Frontend: ${RED}‚ùå Parado${NC}"
        fi
        
        # ngrok
        if curl -s http://localhost:4040 > /dev/null 2>&1; then
            NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o 'https://[^"]*\.ngrok[^"]*' | head -1)
            if [ ! -z "$NGROK_URL" ]; then
                echo -e "   ngrok: ${GREEN}‚úÖ Ativo ($NGROK_URL)${NC}"
            else
                echo -e "   ngrok: ${YELLOW}‚ö†Ô∏è  Dashboard ativo mas sem t√∫neis${NC}"
            fi
        else
            echo -e "   ngrok: ${RED}‚ùå Inativo${NC}"
        fi
        
        # API OCI
        if curl -s http://129.153.86.168:5000/health > /dev/null 2>&1; then
            echo -e "   API OCI: ${GREEN}‚úÖ Dispon√≠vel${NC}"
        else
            echo -e "   API OCI: ${RED}‚ùå Indispon√≠vel${NC}"
        fi
        ;;
    5)
        echo -e "${BLUE}üßπ Limpando configura√ß√µes...${NC}"
        rm -f .env.local
        rm -f /tmp/healthcore-ngrok-url.txt
        rm -f /tmp/ngrok-frontend.log
        echo -e "${GREEN}‚úÖ Configura√ß√µes limpas${NC}"
        ;;
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
        exit 1
        ;;
esac

# Voltar ao diret√≥rio raiz
cd ../..